#version 460 core

#define NUM_BOUNCES 4
#define NUM_SAMPLES 10

// utility
// random
// PCG (permuted congruential generator). Thanks to:
// www.pcg-random.org and www.shadertoy.com/view/XlGcRh
uint nextRandom(inout uint state) {
	state = state * 747796405 + 2891336453;
	uint word = ((state >> ((state >> 28) + 4)) ^ state) * 277803737;
	return (word >> 22) ^ word;
}

float randomValue(inout uint state) {
	return nextRandom(state) / 4294967295.0; // 2^32 - 1
}

vec3 randomVec3(inout uint state) {
	return vec3(
		randomValue(state),
		randomValue(state),
		randomValue(state)
	);
}

vec3 randomVec3(float max, float min, inout uint state) {
	return vec3(
		randomValue(state) * (max - min + 1) + min,
		randomValue(state) * (max - min + 1) + min,
		randomValue(state) * (max - min + 1) + min
	);
}

// Random value in normal distribution (with mean=0 and sd=1)
float randomValueNormalDistribution(inout uint state){
	// Thanks to https://stackoverflow.com/a/6178290
	float theta = 2 * 3.1415926 * randomValue(state);
	float rho = sqrt(-2 * log(randomValue(state)));
	return rho * cos(theta);
}

// Calculate a random direction
vec3 randomDirection(inout uint state) {
	// Thanks to https://math.stackexchange.com/a/1585996
	float x = randomValueNormalDistribution(state);
	float y = randomValueNormalDistribution(state);
	float z = randomValueNormalDistribution(state);
	return normalize(vec3(x, y, z));
}

vec3 randomInHemisphere(vec3 normal, inout uint state) {
    vec3 in_unit_sphere = randomDirection(state);
    if (dot(in_unit_sphere, normal) > 0.0) // In the same hemisphere as the normal
        return in_unit_sphere;
    else
        return -in_unit_sphere;
}

bool nearZero(vec3 vector) {
	// Return true if the vector is close to zero in all dimensions.
    const float s = 1e-8; 
    return (abs(vector.x) < s) && (abs(vector.y) < s) && (abs(vector.z) < s);
}

// inputs
layout(rgba32f, binding = 0) uniform image2D screen;

uniform vec3 cam_pos;
uniform vec2 plane_dims;
uniform float near_plane;
uniform float far_plane;

uniform mat4 inverse_view;
uniform mat4 inverse_projection;

struct Material {
	vec3 albedo;
	float smoothness;
	vec3 emissive_colour;
	float emissive_strength;
};

struct Sphere {
	vec3 pos;
	float radius;

	Material material;
};

layout(std430, binding = 1) buffer spheres_buffer {
	Sphere spheres[];
};
uniform int spheres_max;

struct Ray {
    vec3 origin;
    vec3 dir;
};

struct HitRecord {
	bool hit;
	vec3 point;
	vec3 normal;
	float dist;
	bool front_face;

	int object_type;
	int object_index;
};
#define OBJECT_SPHERE 0

#define set_face_normal(h, r) if (dot(r.dir, h.normal) > 0.0) { \
								h.normal = -h.normal; \
								h.front_face = false; \
							  } else { \
								h.front_face = true; \
							  }

Ray createRay(vec3 origin, vec3 dir) { 
	Ray new_ray;
	new_ray.origin = origin;
	new_ray.dir = dir;
	return new_ray;
}

vec4 trace(Ray ray, uint rng_state);
HitRecord intersectWorld(Ray ray);
HitRecord intersectSphere(int sIndex, Ray r);

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
void main() {
	ivec2 output_dims = imageSize(screen);
	ivec2 p = ivec2(gl_GlobalInvocationID.xy);
	
	if (p.x > output_dims.x || p.y > output_dims.y) {
		return;
	}

	
	vec2 uv = vec2(0, 0);
    uv.x = float((-float(p.x * 2.0) / output_dims.x) + 1.0); // transform to [-1.0, 1.0]
    uv.y = -float((-float(p.y * 2.0) / output_dims.y) + 1.0); // transform to [-1.0, 1.0]
	
	vec4 target = inverse_projection * vec4(uv, 1.0, 1.0);
	vec3 ray_dir = vec3(inverse_view * vec4(normalize(target.xyz / target.w), 0));

	Ray ray = createRay(cam_pos, normalize(ray_dir));

	uint rng_state = p.x + p.y * output_dims.x;

	vec4 result = vec4(0.0, 0.0, 0.0, 0.0);
	for (int i = 0; i < NUM_SAMPLES; i++) {
		result += trace(ray, rng_state + i);
	}
	result /= NUM_SAMPLES;
	
	 // Divide the color by the number of samples and gamma-correct for gamma=2.0.
    float scale = 1.0 / NUM_SAMPLES;
    result.r = sqrt(scale * result.r);
    result.g = sqrt(scale * result.g);
    result.b = sqrt(scale * result.b);

	imageStore(screen, p, result);
}

vec4 trace(Ray ray, uint rng_state) {
	vec3 result = vec3(1.0);
	vec3 incoming_light = vec3(0.0);

	for (int b = 0; b < NUM_BOUNCES; b++) {
		
		HitRecord hit_record = intersectWorld(ray);

		// the ray didn't hit anything
		if (hit_record.hit == false) {
			vec3 unit_dir =  normalize(ray.dir);
			float t = 0.5 * (unit_dir.y + 1.0);
			//result *= (1.0 - t) * vec3(1.0, 1.0, 1.0) + t * vec3(0.5, 0.7, 1.0);
			incoming_light += result * ((1.0 - t) * vec3(1.0, 1.0, 1.0) + t * vec3(0.5, 0.7, 1.0));
			//vec3 sky_color = vec3(0.6, 0.7, 0.9);
			//result += sky_color * multiplier;
			break;
		}
		// ray hit an object
		// get the material
		Material mat;
		switch (hit_record.object_type) {
		case OBJECT_SPHERE:
			mat = spheres[hit_record.object_index].material;
			break;
		}

		result *= mat.albedo;
		vec3 light_emitted = mat.emissive_colour * mat.emissive_strength;
		incoming_light += light_emitted * result;

		ray.origin = hit_record.point;// + hit_record.normal * 0.0001;
		//ray.dir = hit_record.normal + randomInHemisphere(hit_record.normal, rng_state);
		//ray.dir = hit_record.normal + mat.roughness * randomVec3(-0.5, 0.5, rng_state);
		vec3 diffuse_dir = normalize(hit_record.normal + randomDirection(rng_state));
		vec3 specular_dir = reflect(ray.dir, hit_record.normal);
		ray.dir = normalize(mix(diffuse_dir, specular_dir, mat.smoothness));
		if (nearZero(ray.dir)) ray.dir = hit_record.normal;	
	}

	return vec4(incoming_light, 1.0);
}

HitRecord intersectWorld(Ray ray) {	
	HitRecord closestRecord;
	closestRecord.hit = false;
	closestRecord.dist = far_plane + 1.0;
	HitRecord currentRecord;

	// check for intersections with spheres
	for (int i = 0; i < spheres_max; i++) {
		currentRecord = intersectSphere(i, ray);
		if (currentRecord.hit) {
			if (currentRecord.dist < closestRecord.dist) {
				closestRecord = currentRecord;	
			}
		}
	}

	return closestRecord;
}

HitRecord intersectSphere(int sIndex, Ray r) {
	Sphere s = spheres[sIndex];

	vec3 o = r.origin - s.pos;
	float a = dot(r.dir, r.dir);
	float half_b = dot(o, r.dir);
	float c = dot(o, o) - (s.radius * s.radius);
	float discriminant = (half_b * half_b) - (a * c);

	HitRecord hit;
	if (discriminant < 0) {
		hit.hit = false;
		return hit;
	}
	float sqrtd = sqrt(discriminant);
	float root = (-half_b - sqrtd) / a;
	if (root < near_plane || root > far_plane) {
		root = (-half_b + sqrtd) / a;
		if (root < near_plane || root > far_plane) {
			hit.hit = false;
			return hit;
		}
	}
	hit.hit = true;
	hit.dist = root;
	hit.point = r.origin + (root * r.dir);
	hit.normal = (hit.point - s.pos) / s.radius;
	set_face_normal(hit, r);
	hit.object_type = OBJECT_SPHERE;
	hit.object_index = sIndex;
	return hit;
}
